package fr.afgj.coinbot.entity;
// Generated 21 d�c. 2017 09:38:56 by Hibernate Tools 5.1.6.Final

import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import fr.afgj.coinbot.calculation.impl.OperationsOnCurrencyTrend;
import fr.afgj.coinbot.rule.impl.TrendRule;

/**
 * Currencytrend generated by hbm2java
 */
@Component
@Scope(value = "prototype")
@Entity
@Table(name = "currencytrend", schema = "public")
public class CurrencyTrend implements java.io.Serializable {

	/**
	 * 
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int idtrend;
	private Currency currency;
	private Boolean lasttrendgrowing;
	private Integer lasttrendweight;
	private Date timerecord;
	private Double notetobuy;
	private Double notetosell;
	private Double valuebidbtc;
	private Double valueaskbtc;
	// MIS EN COMM ALAIN 29/12
//	private OperationsOnCurrencyTrend ooct;

	{
//		this.ooct = new OperationsOnCurrencyTrend(this);
	}
	public CurrencyTrend() {
	}

	public CurrencyTrend(int idtrend) {
		this.idtrend = idtrend;
		// this.currency = currency;
	}

	public CurrencyTrend(int idtrend, Currency currency, Boolean lasttrendgrowing, Integer lasttrendweight,
			Date timerecord, Double notetobuy, Double notetosell, Double valuebidbtc, Double valueaskbtc) {
		this.idtrend = idtrend;
		this.currency = currency;
		this.lasttrendgrowing = lasttrendgrowing;
		this.lasttrendweight = lasttrendweight;
		this.timerecord = timerecord;
		this.notetobuy = notetobuy;
		this.notetosell = notetosell;
		this.valuebidbtc = valuebidbtc;
		this.valueaskbtc = valueaskbtc;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "idtrend", unique = true, nullable = false)
	public int getIdtrend() {
		return this.idtrend;
	}

	public void setIdtrend(int idtrend) {
		this.idtrend = idtrend;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idcurrency", nullable = false)
	public Currency getCurrency() {
		return this.currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	@Column(name = "lasttrendgrowing")
	public Boolean getLasttrendgrowing() {
		return this.lasttrendgrowing;
	}

	public void setLasttrendgrowing(Boolean lasttrendgrowing) {
		this.lasttrendgrowing = lasttrendgrowing;
	}

	@Column(name = "lasttrendweight")
	public Integer getLasttrendweight() {
		return this.lasttrendweight;
	}

	public void setLasttrendweight(Integer lasttrendweight) {
		this.lasttrendweight = lasttrendweight;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "timerecord", length = 29)
	public Date getTimerecord() {
		return this.timerecord;
	}

	public void setTimerecord(Date timerecord) {
		this.timerecord = timerecord;
	}

	@Column(name = "notetobuy", precision = 17, scale = 17)
	public Double getNotetobuy() {
		return this.notetobuy;
	}

	public void setNotetobuy(Double notetobuy) {
		this.notetobuy = notetobuy;
	}

	@Column(name = "notetosell", precision = 17, scale = 17)
	public Double getNotetosell() {
		return this.notetosell;
	}

	public void setNotetosell(Double notetosell) {
		this.notetosell = notetosell;
	}

	@Column(name = "valuebidbtc", precision = 17, scale = 17)
	public Double getValuebidbtc() {
		return this.valuebidbtc;
	}

	public void setValuebidbtc(Double valuebidbtc) {
		this.valuebidbtc = valuebidbtc;
	}

	@Column(name = "valueaskbtc", precision = 17, scale = 17)
	public Double getValueaskbtc() {
		return this.valueaskbtc;
	}

	public void setValueaskbtc(Double valueaskbtc) {
		this.valueaskbtc = valueaskbtc;
	}
	// MIS EN COMM ALAIN 29/12
//	public OperationsOnCurrencyTrend getOoct() {
//		return ooct;
//	}
//
//	public void setOoct(OperationsOnCurrencyTrend ooct) {
//		this.ooct = ooct;
//	}

	// methods
	// ----------------------------------------------------------------------



	/*
	 * Mise à jour de la tendance de la devise return true si tout c'est bien passé,
	 * false sinon
	 * 
	 */
//	public synchronized boolean update(TrendRule tr) {
//
//		List<CurrencyRate> crs = new ArrayList<>(this.getCurrency().getCurrencyratesStudy());
//		this.getOoct().setNewCurrencyRates(crs);
//		Thread t = new Thread(ooct);
//		t.start();
//
//		return false;
//	}

	public volatile static Comparator<CurrencyTrend> CTNoteToBuyComparator = new Comparator<CurrencyTrend>() {

		@Override
		public int compare(CurrencyTrend CT1, CurrencyTrend CT2) {
			// TODO Auto-generated method stub

			int noteCT1 = (int) (CT1.getNotetobuy() * 1000);
			int noteCT2 = (int) (CT2.getNotetobuy() * 1000);
			return noteCT2 - noteCT1;
		}
	};

	public volatile static Comparator<CurrencyTrend> CTNoteToSellComparator = new Comparator<CurrencyTrend>() {

		@Override
		public int compare(CurrencyTrend CT1, CurrencyTrend CT2) {

			int noteCT1 = (int) (CT1.getNotetosell() * 1000);
			int noteCT2 = (int) (CT2.getNotetosell() * 1000);
			return noteCT2 - noteCT1;

		}
	};

}
