package fr.afgj.coinbot.entity;
// Generated 21 dï¿½c. 2017 09:38:56 by Hibernate Tools 5.1.6.Final

import java.util.Comparator;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Currencyrate generated by hbm2java
 */
@Entity
@Table(name = "currencyrate", schema = "public")
public class CurrencyRate implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int idcurrencyrate;
	private Currency currency;
	private Date timerecord;
	private Double bidbtc;
	private Double askbtc;
	private Double bidusd;
	private Double askusd;
	private Double bideur;
	private Double askeur;

	public CurrencyRate() {
	}

	public CurrencyRate(int idcurrencyrate, Currency currency) {
		this.idcurrencyrate = idcurrencyrate;
		this.currency = currency;
	}

	public CurrencyRate( Currency currency, Date timerecord, Double bidbtc, Double askbtc) {
		super();
		
		this.currency = currency;
		this.timerecord = timerecord;
		this.bidbtc = bidbtc;
		this.askbtc = askbtc;
	}

	public CurrencyRate(int idcurrencyrate, Currency currency, Date timerecord, Double bidbtc, Double askbtc,
			Double bidusd, Double askusd, Double bideur, Double askeur) {
		this.idcurrencyrate = idcurrencyrate;
		this.currency = currency;
		this.timerecord = timerecord;
		this.bidbtc = bidbtc;
		this.askbtc = askbtc;
		this.bidusd = bidusd;
		this.askusd = askusd;
		this.bideur = bideur;
		this.askeur = askeur;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "idcurrencyrate", unique = true, nullable = false)
	public int getIdcurrencyrate() {
		return this.idcurrencyrate;
	}

	public void setIdcurrencyrate(int idcurrencyrate) {
		this.idcurrencyrate = idcurrencyrate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idcurrency", nullable = false)
	public Currency getCurrency() {
		return this.currency;
	}

	public void setCurrency(Currency currency) {
		this.currency = currency;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "timerecord", length = 29)
	public Date getTimerecord() {
		return this.timerecord;
	}

	public void setTimerecord(Date timerecord) {
		this.timerecord = timerecord;
	}

	@Column(name = "bidbtc", precision = 17, scale = 17)
	public Double getBidbtc() {
		return this.bidbtc;
	}

	public void setBidbtc(Double bidbtc) {
		this.bidbtc = bidbtc;
	}

	@Column(name = "askbtc", precision = 17, scale = 17)
	public Double getAskbtc() {
		return this.askbtc;
	}

	public void setAskbtc(Double askbtc) {
		this.askbtc = askbtc;
	}

	@Column(name = "bidusd", precision = 17, scale = 17)
	public Double getBidusd() {
		return this.bidusd;
	}

	public void setBidusd(Double bidusd) {
		this.bidusd = bidusd;
	}

	@Column(name = "askusd", precision = 17, scale = 17)
	public Double getAskusd() {
		return this.askusd;
	}

	public void setAskusd(Double askusd) {
		this.askusd = askusd;
	}

	@Column(name = "bideur", precision = 17, scale = 17)
	public Double getBideur() {
		return this.bideur;
	}

	public void setBideur(Double bideur) {
		this.bideur = bideur;
	}

	@Column(name = "askeur", precision = 17, scale = 17)
	public Double getAskeur() {
		return this.askeur;
	}

	public void setAskeur(Double askeur) {
		this.askeur = askeur;
	}
	
	// the youngest is the first, the oldest is the last after sort
	public volatile static Comparator<CurrencyRate> CRComparatorByDate = new Comparator<CurrencyRate>() {

		@Override
		public int compare(CurrencyRate CR1, CurrencyRate CR2) {
			// TODO Auto-generated method stub

			Long dateLongCR1 =  (CR1.getTimerecord().getTime());
			Long dateLongCR2 =  (CR2.getTimerecord().getTime());
			
			return (int)(- dateLongCR1 + dateLongCR2);
		}
	};
	

	public static void main(String[] args) {
		
//		CurrencyRate cr1 = new CurrencyRate();
//		cr1.setTimerecord(new Date(1514294745000L));
//		CurrencyRate cr2 = new CurrencyRate();
//		cr2.setTimerecord(new Date(1514294747000L));
//		CurrencyRate cr3 = new CurrencyRate();
//		cr3.setTimerecord(new Date(1514294746000L));
//		
//		List<CurrencyRate> crs  =  new ArrayList<>();
//		crs.add(cr1);
//		crs.add(cr2);
//		crs.add(cr3);
//		
//		for (CurrencyRate currencyRate : crs) {
//			System.out.println(currencyRate.getTimerecord());
//		}
//		
//		Collections.sort(crs, CurrencyRate.CRComparatorByDate);
//		
//		for (CurrencyRate currencyRate : crs) {
//			System.out.println(currencyRate.getTimerecord());
//		}
		
		

		
	}
	
}
